

//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------


namespace EJC.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class EnergyTerminalN : DbContext
{
    public EnergyTerminalN()
        : base("name=EnergyTerminalN")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<vwChart> vwCharts { get; set; }

    public virtual DbSet<vwData> vwDatas { get; set; }

    public virtual DbSet<vwGroup> vwGroups { get; set; }

    public virtual DbSet<vwLine> vwLines { get; set; }


    [DbFunction("EnergyTerminalN", "CheckValidKey")]
    public virtual IQueryable<CheckValidKey_Result> CheckValidKey(string key)
    {

        var keyParameter = key != null ?
            new ObjectParameter("Key", key) :
            new ObjectParameter("Key", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CheckValidKey_Result>("[EnergyTerminalN].[CheckValidKey](@Key)", keyParameter);
    }


    [DbFunction("EnergyTerminalN", "fnNewsChart")]
    public virtual IQueryable<fnNewsChart_Result> fnNewsChart(Nullable<int> market_ID)
    {

        var market_IDParameter = market_ID.HasValue ?
            new ObjectParameter("Market_ID", market_ID) :
            new ObjectParameter("Market_ID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnNewsChart_Result>("[EnergyTerminalN].[fnNewsChart](@Market_ID)", market_IDParameter);
    }

}

}

